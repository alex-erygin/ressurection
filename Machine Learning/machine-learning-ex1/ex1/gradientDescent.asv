function [theta, J_history] = gradientDescent(x, y, theta, alpha, num_iters)
%GRADIENTDESCENT Performs gradient descent to learn theta
%   theta = GRADIENTDESENT(X, y, theta, alpha, num_iters) updates theta by 
%   taking num_iters gradient steps with learning rate alpha

% Initialize some useful values
m = length(y); % number of training examples
J_history = zeros(num_iters, 1);
%fprintf('m: %f, alpha: %f\n', m, alpha);
%pause();
for i = 1:num_iters
    s0 = 0.0;
    s1 = 0.0;
    
    for k = 1:m
        H = theta(1,1) + theta(2,1)*x(k,2);
        %fprintf('theta0: %f,  theta1:%f, H:%f\n', theta(1,1), theta(2,1), H);
        
        s0 = s0 + (alpha/m)*(H - y(k, 1));
        s1 = s1 + (alpha/m)*(H - y(k, 1))*x(k,2);
        %fprintf('s0: %f,  s1:%f\n', s0, s1);
        %pause();
    end
    
    
    %pause();
    
    theta(1,1) = theta(1,1) - s0;
    theta(2,1) = theta(2,1) - s1;
    fprintf('theta0: %f,  theta1:%f\n', theta(1,1), theta(2,1));
    %pause();
    % Save the cost J in every iteration    
    J_history(i) = computeCost(x, y, theta);
end

end
