/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace hellothrift
{
	public partial class MyService
	{
		public interface Iface
		{
			void Ping();
#if SILVERLIGHT
      IAsyncResult Begin_Ping(AsyncCallback callback, object state);
      void End_Ping(IAsyncResult asyncResult);
#endif
			SampleResponseDto SendRequest(SampleRequestDto request);
#if SILVERLIGHT
      IAsyncResult Begin_SendRequest(AsyncCallback callback, object state, SampleRequestDto request);
      SampleResponseDto End_SendRequest(IAsyncResult asyncResult);
#endif
		}

		public class Client : IDisposable, Iface
		{
			public Client(TProtocol prot) : this(prot, prot)
			{
			}

			public Client(TProtocol iprot, TProtocol oprot)
			{
				iprot_ = iprot;
				oprot_ = oprot;
			}

			protected TProtocol iprot_;
			protected TProtocol oprot_;
			protected int seqid_;

			public TProtocol InputProtocol
			{
				get { return iprot_; }
			}
			public TProtocol OutputProtocol
			{
				get { return oprot_; }
			}


			#region " IDisposable Support "
			private bool _IsDisposed;

			// IDisposable
			public void Dispose()
			{
				Dispose(true);
			}


			protected virtual void Dispose(bool disposing)
			{
				if (!_IsDisposed)
				{
					if (disposing)
					{
						if (iprot_ != null)
						{
							((IDisposable)iprot_).Dispose();
						}
						if (oprot_ != null)
						{
							((IDisposable)oprot_).Dispose();
						}
					}
				}
				_IsDisposed = true;
			}
			#endregion



#if SILVERLIGHT
      public IAsyncResult Begin_Ping(AsyncCallback callback, object state)
      {
        return send_Ping(callback, state);
      }

      public void End_Ping(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_Ping();
      }

#endif

			public void Ping()
			{
#if !SILVERLIGHT
				send_Ping();
				recv_Ping();

#else
        var asyncResult = Begin_Ping(null, null);
        End_Ping(asyncResult);

#endif
			}
#if SILVERLIGHT
      public IAsyncResult send_Ping(AsyncCallback callback, object state)
#else
			public void send_Ping()
#endif
			{
				oprot_.WriteMessageBegin(new TMessage("Ping", TMessageType.Call, seqid_));
				Ping_args args = new Ping_args();
				args.Write(oprot_);
				oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
				oprot_.Transport.Flush();
#endif
			}

			public void recv_Ping()
			{
				TMessage msg = iprot_.ReadMessageBegin();
				if (msg.Type == TMessageType.Exception)
				{
					TApplicationException x = TApplicationException.Read(iprot_);
					iprot_.ReadMessageEnd();
					throw x;
				}
				Ping_result result = new Ping_result();
				result.Read(iprot_);
				iprot_.ReadMessageEnd();
				return;
			}


#if SILVERLIGHT
      public IAsyncResult Begin_SendRequest(AsyncCallback callback, object state, SampleRequestDto request)
      {
        return send_SendRequest(callback, state, request);
      }

      public SampleResponseDto End_SendRequest(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SendRequest();
      }

#endif

			public SampleResponseDto SendRequest(SampleRequestDto request)
			{
#if !SILVERLIGHT
				send_SendRequest(request);
				return recv_SendRequest();

#else
        var asyncResult = Begin_SendRequest(null, null, request);
        return End_SendRequest(asyncResult);

#endif
			}
#if SILVERLIGHT
      public IAsyncResult send_SendRequest(AsyncCallback callback, object state, SampleRequestDto request)
#else
			public void send_SendRequest(SampleRequestDto request)
#endif
			{
				oprot_.WriteMessageBegin(new TMessage("SendRequest", TMessageType.Call, seqid_));
				SendRequest_args args = new SendRequest_args();
				args.Request = request;
				args.Write(oprot_);
				oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
				oprot_.Transport.Flush();
#endif
			}

			public SampleResponseDto recv_SendRequest()
			{
				TMessage msg = iprot_.ReadMessageBegin();
				if (msg.Type == TMessageType.Exception)
				{
					TApplicationException x = TApplicationException.Read(iprot_);
					iprot_.ReadMessageEnd();
					throw x;
				}
				SendRequest_result result = new SendRequest_result();
				result.Read(iprot_);
				iprot_.ReadMessageEnd();
				if (result.__isset.success)
				{
					return result.Success;
				}
				throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SendRequest failed: unknown result");
			}

		}
		public class Processor : TProcessor
		{
			public Processor(Iface iface)
			{
				iface_ = iface;
				processMap_["Ping"] = Ping_Process;
				processMap_["SendRequest"] = SendRequest_Process;
			}

			protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
			private Iface iface_;
			protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

			public bool Process(TProtocol iprot, TProtocol oprot)
			{
				try
				{
					TMessage msg = iprot.ReadMessageBegin();
					ProcessFunction fn;
					processMap_.TryGetValue(msg.Name, out fn);
					if (fn == null)
					{
						TProtocolUtil.Skip(iprot, TType.Struct);
						iprot.ReadMessageEnd();
						TApplicationException x = new TApplicationException(TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
						oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
						x.Write(oprot);
						oprot.WriteMessageEnd();
						oprot.Transport.Flush();
						return true;
					}
					fn(msg.SeqID, iprot, oprot);
				}
				catch (IOException)
				{
					return false;
				}
				return true;
			}

			public void Ping_Process(int seqid, TProtocol iprot, TProtocol oprot)
			{
				Ping_args args = new Ping_args();
				args.Read(iprot);
				iprot.ReadMessageEnd();
				Ping_result result = new Ping_result();
				iface_.Ping();
				oprot.WriteMessageBegin(new TMessage("Ping", TMessageType.Reply, seqid));
				result.Write(oprot);
				oprot.WriteMessageEnd();
				oprot.Transport.Flush();
			}

			public void SendRequest_Process(int seqid, TProtocol iprot, TProtocol oprot)
			{
				SendRequest_args args = new SendRequest_args();
				args.Read(iprot);
				iprot.ReadMessageEnd();
				SendRequest_result result = new SendRequest_result();
				result.Success = iface_.SendRequest(args.Request);
				oprot.WriteMessageBegin(new TMessage("SendRequest", TMessageType.Reply, seqid));
				result.Write(oprot);
				oprot.WriteMessageEnd();
				oprot.Transport.Flush();
			}

		}


#if !SILVERLIGHT
		[Serializable]
#endif
		public partial class Ping_args : TBase
		{

			public Ping_args()
			{
			}

			public void Read(TProtocol iprot)
			{
				TField field;
				iprot.ReadStructBegin();
				while (true)
				{
					field = iprot.ReadFieldBegin();
					if (field.Type == TType.Stop)
					{
						break;
					}
					switch (field.ID)
					{
						default:
							TProtocolUtil.Skip(iprot, field.Type);
							break;
					}
					iprot.ReadFieldEnd();
				}
				iprot.ReadStructEnd();
			}

			public void Write(TProtocol oprot)
			{
				TStruct struc = new TStruct("Ping_args");
				oprot.WriteStructBegin(struc);
				oprot.WriteFieldStop();
				oprot.WriteStructEnd();
			}

			public override string ToString()
			{
				StringBuilder sb = new StringBuilder("Ping_args(");
				sb.Append(")");
				return sb.ToString();
			}

		}


#if !SILVERLIGHT
		[Serializable]
#endif
		public partial class Ping_result : TBase
		{

			public Ping_result()
			{
			}

			public void Read(TProtocol iprot)
			{
				TField field;
				iprot.ReadStructBegin();
				while (true)
				{
					field = iprot.ReadFieldBegin();
					if (field.Type == TType.Stop)
					{
						break;
					}
					switch (field.ID)
					{
						default:
							TProtocolUtil.Skip(iprot, field.Type);
							break;
					}
					iprot.ReadFieldEnd();
				}
				iprot.ReadStructEnd();
			}

			public void Write(TProtocol oprot)
			{
				TStruct struc = new TStruct("Ping_result");
				oprot.WriteStructBegin(struc);

				oprot.WriteFieldStop();
				oprot.WriteStructEnd();
			}

			public override string ToString()
			{
				StringBuilder sb = new StringBuilder("Ping_result(");
				sb.Append(")");
				return sb.ToString();
			}

		}


#if !SILVERLIGHT
		[Serializable]
#endif
		public partial class SendRequest_args : TBase
		{
			private SampleRequestDto _request;

			public SampleRequestDto Request
			{
				get
				{
					return _request;
				}
				set
				{
					__isset.request = true;
					this._request = value;
				}
			}


			public Isset __isset;
#if !SILVERLIGHT
			[Serializable]
#endif
			public struct Isset
			{
				public bool request;
			}

			public SendRequest_args()
			{
			}

			public void Read(TProtocol iprot)
			{
				TField field;
				iprot.ReadStructBegin();
				while (true)
				{
					field = iprot.ReadFieldBegin();
					if (field.Type == TType.Stop)
					{
						break;
					}
					switch (field.ID)
					{
						case 1:
							if (field.Type == TType.Struct)
							{
								Request = new SampleRequestDto();
								Request.Read(iprot);
							}
							else
							{
								TProtocolUtil.Skip(iprot, field.Type);
							}
							break;
						default:
							TProtocolUtil.Skip(iprot, field.Type);
							break;
					}
					iprot.ReadFieldEnd();
				}
				iprot.ReadStructEnd();
			}

			public void Write(TProtocol oprot)
			{
				TStruct struc = new TStruct("SendRequest_args");
				oprot.WriteStructBegin(struc);
				TField field = new TField();
				if (Request != null && __isset.request)
				{
					field.Name = "request";
					field.Type = TType.Struct;
					field.ID = 1;
					oprot.WriteFieldBegin(field);
					Request.Write(oprot);
					oprot.WriteFieldEnd();
				}
				oprot.WriteFieldStop();
				oprot.WriteStructEnd();
			}

			public override string ToString()
			{
				StringBuilder sb = new StringBuilder("SendRequest_args(");
				sb.Append("Request: ");
				sb.Append(Request == null ? "<null>" : Request.ToString());
				sb.Append(")");
				return sb.ToString();
			}

		}


#if !SILVERLIGHT
		[Serializable]
#endif
		public partial class SendRequest_result : TBase
		{
			private SampleResponseDto _success;

			public SampleResponseDto Success
			{
				get
				{
					return _success;
				}
				set
				{
					__isset.success = true;
					this._success = value;
				}
			}


			public Isset __isset;
#if !SILVERLIGHT
			[Serializable]
#endif
			public struct Isset
			{
				public bool success;
			}

			public SendRequest_result()
			{
			}

			public void Read(TProtocol iprot)
			{
				TField field;
				iprot.ReadStructBegin();
				while (true)
				{
					field = iprot.ReadFieldBegin();
					if (field.Type == TType.Stop)
					{
						break;
					}
					switch (field.ID)
					{
						case 0:
							if (field.Type == TType.Struct)
							{
								Success = new SampleResponseDto();
								Success.Read(iprot);
							}
							else
							{
								TProtocolUtil.Skip(iprot, field.Type);
							}
							break;
						default:
							TProtocolUtil.Skip(iprot, field.Type);
							break;
					}
					iprot.ReadFieldEnd();
				}
				iprot.ReadStructEnd();
			}

			public void Write(TProtocol oprot)
			{
				TStruct struc = new TStruct("SendRequest_result");
				oprot.WriteStructBegin(struc);
				TField field = new TField();

				if (this.__isset.success)
				{
					if (Success != null)
					{
						field.Name = "Success";
						field.Type = TType.Struct;
						field.ID = 0;
						oprot.WriteFieldBegin(field);
						Success.Write(oprot);
						oprot.WriteFieldEnd();
					}
				}
				oprot.WriteFieldStop();
				oprot.WriteStructEnd();
			}

			public override string ToString()
			{
				StringBuilder sb = new StringBuilder("SendRequest_result(");
				sb.Append("Success: ");
				sb.Append(Success == null ? "<null>" : Success.ToString());
				sb.Append(")");
				return sb.ToString();
			}

		}

	}
}
